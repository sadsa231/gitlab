import { GlAlert, GlModal } from '@gitlab/ui';
import Vue from 'vue';
import VueApollo from 'vue-apollo';
import waitForPromises from 'helpers/wait_for_promises';
import createMockApollo from 'helpers/mock_apollo_helper';
import { shallowMountExtended, extendedWrapper } from 'helpers/vue_test_utils_helper';
import { stubComponent, RENDER_ALL_SLOTS_TEMPLATE } from 'helpers/stub_component';
import VulnerabilityFindingModal from 'ee/security_dashboard/components/pipeline/vulnerability_finding_modal.vue';
import SolutionCard from 'ee/vue_shared/security_reports/components/solution_card_graphql.vue';
import VulnerabilityDetailsGraphql from 'ee/security_dashboard/components/shared/vulnerability_details_graphql/index.vue';
import securityReportFindingQuery from 'ee/security_dashboard/graphql/queries/security_report_finding.query.graphql';
import {
  getPipelineSecurityReportFindingResponse,
  pipelineSecurityReportFinding,
} from './mock_data';

Vue.use(VueApollo);

const TEST_FINDING = pipelineSecurityReportFinding;
const TEST_PIPELINE_IID = 1;
const TEST_PROJECT_FULL_PATH = 'path/to/my/project';

describe('Vulnerability finding modal', () => {
  let wrapper;

  const createMockApolloProvider = ({ withError, withoutFindingData }) => {
    const response = getPipelineSecurityReportFindingResponse(withoutFindingData);

    const requestHandlers = [
      [
        securityReportFindingQuery,
        withError ? jest.fn().mockRejectedValue() : jest.fn().mockResolvedValue(response),
      ],
    ];

    return createMockApollo(requestHandlers);
  };

  const createWrapper = ({ withError = false, withoutFindingData = false } = {}) =>
    shallowMountExtended(VulnerabilityFindingModal, {
      propsData: {
        findingUuid: TEST_FINDING.uuid,
        pipelineIid: TEST_PIPELINE_IID,
        projectFullPath: TEST_PROJECT_FULL_PATH,
      },
      stubs: {
        GlModal: stubComponent(GlModal, {
          template: RENDER_ALL_SLOTS_TEMPLATE,
        }),
      },
      apolloProvider: createMockApolloProvider({ withError, withoutFindingData }),
    });

  const findModal = () => wrapper.findComponent(GlModal);
  const findVulnerabilityDetails = () => wrapper.findComponent(VulnerabilityDetailsGraphql);
  const findSolutionCard = () => wrapper.findComponent(SolutionCard);
  const findErrorAlert = () => wrapper.findComponent(GlAlert);
  const findFooter = () => wrapper.findByTestId('footer');
  const withinFooter = () => extendedWrapper(findFooter());
  const findLoadingIndicators = () => [
    wrapper.findByTestId('title-loading-indicator'),
    wrapper.findByTestId('content-loading-indicator'),
  ];

  beforeEach(() => {
    wrapper = createWrapper();
  });

  afterEach(() => {
    wrapper.destroy();
  });

  describe('modal instance', () => {
    it('gets passed the correct props', () => {
      expect(findModal().props()).toMatchObject({
        modalId: expect.any(String),
      });
    });

    it('makes the component emit "hide" when the modal gets closed', () => {
      expect(wrapper.emitted('hide')).toBeUndefined();

      findModal().vm.$emit('hidden');

      expect(wrapper.emitted('hide')).toHaveLength(1);
    });

    describe('footer', () => {
      it('renders as expected', () => {
        expect(findFooter().exists()).toBe(true);
      });

      it('contains a "cancel" button that will hide the modal', () => {
        const modalHideSpy = jest.spyOn(findModal().vm, 'hide');
        const cancelButton = withinFooter().findByTestId('cancel-button');

        expect(modalHideSpy).not.toHaveBeenCalled();

        cancelButton.vm.$emit('click');

        expect(modalHideSpy).toHaveBeenCalled();
      });
    });
  });

  describe('when loading', () => {
    it('does not show an error alert', () => {
      expect(findErrorAlert().exists()).toBe(false);
    });

    it('shows a skeleton loaders', () => {
      findLoadingIndicators().forEach((loadingIndicator) => {
        expect(loadingIndicator.exists()).toBe(true);
      });
    });
  });

  describe('when loaded successfully', () => {
    beforeEach(waitForPromises);

    it('does not show an error alert', () => {
      expect(findErrorAlert().exists()).toBe(false);
    });

    it('does not show skeleton loaders', () => {
      findLoadingIndicators().forEach((loadingIndicator) => {
        expect(loadingIndicator.exists()).toBe(false);
      });
    });

    it(`shows the finding's title within the modal's header`, () => {
      expect(wrapper.findByRole('heading').text()).toBe(TEST_FINDING.title);
    });

    describe('finding details', () => {
      it('displays details about the given vulnerability finding', () => {
        const { description, severity } = TEST_FINDING;

        expect(findVulnerabilityDetails().props()).toMatchObject({
          description,
          severity,
        });
      });
    });

    describe('solution card', () => {
      it('gets passed the correct solution prop', () => {
        expect(findSolutionCard().props('solution')).toBe(TEST_FINDING.solution);
      });
    });
  });

  describe.each([{ withError: true }, { withoutFindingData: true }])(
    'when an error happens - %s',
    (errorContext) => {
      beforeEach(async () => {
        wrapper = createWrapper(errorContext);
        await waitForPromises();
      });

      it(`shows an error message within the modal's heading`, () => {
        expect(wrapper.findByRole('heading').text()).toBe('Error');
      });

      it('shows an error alert with the correct error message', () => {
        expect(findErrorAlert().text()).toBe(
          'There was an error fetching the finding. Please try again.',
        );
      });
    },
  );
});
